version:#version 330
vertex [
	$version
	layout (location = 0) in vec4 position;
	layout (location = 1) in vec4 colors;
	layout (location = 2) in vec3 Normals;

	out vec2 texCoord;
	out vec4 colortest;
	out vec3 N;
	out float visiblity;
	out float waterProfu;

	uniform mat4 world;
	uniform mat4 view;
	uniform mat4 projection;
	uniform float time;

	uniform float FOG_Density; 
	uniform float FOG_Gradiante;

	const float Profudensity = 0.1; 
	const float Profugradiante = -3.5; 

	void main()
	{
		vec4 worldPosition = position * world;
		vec4 posRelativeCamera = worldPosition * view;


		//Curvature Math
		vec4 finalposition = posRelativeCamera;
		float radius = 500;
		
		float dis = length(worldPosition.xz);
		float curvature = 1-cos(dis/radius);
		
		finalposition.y -= radius*curvature;
		//
		
		float xcoord = position.x - Normals.x;
		float zcoord = position.z - Normals.z;
		float ycoord = position.y - Normals.y;
		 
		//colortest = vec4(Normals.x,Normals.y,Normals.z,1);

		N = Normals;
		
		// projection1. y is largest normal component
		// so use x and z to sample texture
		//texCoord = vec2(xcoord,zcoord); //first projection
		// projection2. x is largest normal component
		// so use z and y to sample texture
		//texCoord= vec2(zcoord,ycoord); //second projection
		// projection3. z is largest normal component
		// so use x and y to sample texture
		//texCoord = vec2(xcoord,ycoord); //third projection

		//frag_colors = colors;
		texCoord = vec2(xcoord, zcoord);
		//texCoord += vec2(time, -time) / 30;

		float distance = length(finalposition.xyz);
		visiblity = exp(-pow((distance * FOG_Density), FOG_Gradiante));
		visiblity = clamp(visiblity, 0.0, 1.0);

		waterProfu = exp(-pow((distance * Profudensity), Profugradiante));
		waterProfu = clamp(waterProfu, 0.0, 1.0);
		
		gl_Position = finalposition * projection;
	}
];

fragment [
	$version
	layout(location = 0) out vec4 color;

	in vec2 texCoord;
	in vec4 colortest;
	in vec3 N;
	in float visiblity;
	in float waterProfu;

	uniform sampler2D texture0;
	uniform vec4 FOG_Color;

	uniform vec4 AmbienceColor;

	void main()
	{
		color = texture(texture0, texCoord);
		color = mix(AmbienceColor, color, AmbienceColor.a);
		color = vec4(color.x, color.y, color.z, 0.95);
		color = mix(vec4(color.x, color.y, color.z, 0.5), color, waterProfu);
		color = mix(FOG_Color, color, visiblity);
	}
];